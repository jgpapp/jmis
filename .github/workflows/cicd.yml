name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - uat

jobs:
  deploy:
    name: Deploy to Remote Server
    runs-on: ubuntu-latest

    steps:
    # Deploy to Production if merged to 'main'
    - name: Deploy to Production Server
      if: github.ref_name == 'main' # This step only runs if the branch is 'main'
      uses: appleboy/ssh-action@v1.0.0 # Action to connect to a remote server via SSH
      with:
        host: ${{ secrets.PROD_REMOTE_HOST }} # Directly use production secrets
        username: ${{ secrets.PROD_REMOTE_USER }} # Directly use production secrets
        key: ${{ secrets.PROD_SSH_PRIVATE_KEY }} # Directly use production secrets
        port: ${{ secrets.PROD_SSH_PORT || 22 }} # Directly use production secrets, with default
        script: |
          # Navigate to the directory where your docker-compose.yml is located on the remote server
          cd /home/jmis/

          # Stop and remove existing containers, then start new ones in detached mode
          # This ensures a clean deployment with the new images
          docker compose --env-file env/.env down
          docker rmi jmis-jgp_app_ui
          docker rmi jmis-jgp_app
          docker compose --env-file env/.env up --build -d

          # Optional: Clean up old Docker images to save space
          docker image prune -f

          echo "Deployment completed successfully for main branch (Production)!"

    # Deploy to UAT/Test if merged to 'uat'
    - name: Deploy to UAT/Test Server
      if: github.ref_name == 'uat' # This step only runs if the branch is 'uat'
      uses: appleboy/ssh-action@v1.0.0 # Action to connect to a remote server via SSH
      with:
        host: ${{ secrets.TEST_REMOTE_HOST }} # Directly use UAT secrets
        username: ${{ secrets.TEST_REMOTE_USER }} # Directly use UAT secrets
        key: ${{ secrets.TEST_SSH_PRIVATE_KEY }} # Directly use UAT secrets
        port: ${{ secrets.TEST_SSH_PORT || 22 }} # Directly use UAT secrets, with default
        script: |
          # Navigate to the directory where your docker-compose.yml is located on the remote server
          cd /home/jmis/

          # Stop and remove existing containers, then start new ones in detached mode
          # This ensures a clean deployment with the new images
          docker compose --env-file env/.env down
          docker rmi jmis-jgp_app_ui
          docker rmi jmis-jgp_app
          docker compose --env-file env/.env up --build -d

          # Optional: Clean up old Docker images to save space
          docker image prune -f

          echo "Deployment completed successfully for uat branch (UAT/Test)!"
