name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - uat

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    outputs:
      angular-tag: ${{ steps.set-tag.outputs.angular }}
      spring-tag: ${{ steps.set-tag.outputs.spring }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Set tags based on branch
      id: set-tag
      run: |
        echo "angular=${{ secrets.DOCKER_USERNAME }}/my-angular-app:${{ github.ref_name }}" >> $GITHUB_OUTPUT
        echo "spring=${{ secrets.DOCKER_USERNAME }}/my-spring-app:${{ github.ref_name }}" >> $GITHUB_OUTPUT

    - name: Build and push Angular image
      uses: docker/build-push-action@v5
      with:
        context: ./jgp-database-web
        push: true
        tags: ${{ steps.set-tag.outputs.angular }}

    - name: Build and push Spring Boot image
      uses: docker/build-push-action@v5
      with:
        context: ./jgp-database-app
        push: true
        tags: ${{ steps.set-tag.outputs.spring }}

  deploy-to-uat:
    name: Deploy to UAT
    needs: build
    if: github.ref_name == 'uat'
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to UAT via SSH
      run: |
        echo "${{ secrets.TEST_SSH_PRIVATE_KEY }}" > key.pem
        chmod 600 key.pem

        ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.TEST_REMOTE_USER }}@${{ secrets.TEST_REMOTE_HOST }} << EOF
          docker pull ${{ secrets.DOCKER_USERNAME }}/jgp-app-web:uat
          docker pull ${{ secrets.DOCKER_USERNAME }}/jgp-app-api:uat
          docker-compose down
          docker-compose up -d
        EOF

  deploy-to-prod:
    name: Deploy to Production
    needs: build
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest

    steps:
    - name: Deploy to Production via SSH
      run: |
        echo "${{ secrets.PROD_SSH_PRIVATE_KEY }}" > key.pem
        chmod 600 key.pem

        ssh -i key.pem -o StrictHostKeyChecking=no ${{ secrets.PROD_REMOTE_USER }}@${{ secrets.PROD_REMOTE_HOST }} << EOF
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-angular-app:main
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-spring-app:main
          docker-compose down
          docker-compose up -d
        EOF
